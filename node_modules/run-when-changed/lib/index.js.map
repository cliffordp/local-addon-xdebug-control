{"version":3,"sources":["../index.js"],"names":[],"mappings":";;;;;kBA6CwB,c;;AA7CxB;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAAS,aAAT,cAA4D;AAAA,MAAnC,KAAmC,QAAnC,KAAmC;AAAA,MAA5B,KAA4B,QAA5B,KAA4B;AAAA,MAArB,IAAqB,QAArB,IAAqB;AAAA,MAAX,OAAW,SAAX,OAAW;;AAC1D,MAAM,OAAO,SAAP,IAAO,CAAC,GAAD,EAAM,MAAN;AAAA,WAAiB,OAAO,GAAP,CAAW;AAAA,oBAAc,GAAd,SAAqB,wBAAS,KAAT,CAArB;AAAA,KAAX,EAAmD,IAAnD,CAAwD,IAAxD,CAAjB;AAAA,GAAb;AACA,MAAM,MAAM,SAAN,GAAM,MAAO;AACjB,QAAI,OAAJ,EAAa;AACX,cAAQ,GAAR,CAAY,GAAZ;AACD;AACF,GAJD;;AAMA,SAAO,IAAI,OAAJ,CAAY,mBAAW;AAC5B,YAAQ,SAAS,CAAE,MAAF,CAAjB;AACA,QAAM,SAAS,CAAE,KAAK,OAAL,EAAc,KAAd,CAAF,EAAwB,KAAK,OAAL,EAAc,KAAd,CAAxB,EAA8C,KAAK,MAAL,EAAa,IAAb,CAA9C,EAAmE,IAAnE,CAAwE,GAAxE,CAAf;AACA,QAAM,OAAO,eAAS,KAAT,CAAb;;AAEA,SAAK,EAAL,CAAQ,OAAR,EAAiB,mBAAW;AAC1B,UAAI,OAAO,IAAP,CAAY,QAAQ,OAAR,EAAZ,EAA+B,MAAnC,EAA2C;AACzC,YAAO,MAAP;AACD,OAFD,MAEO;AACL,YAAO,MAAP;AACA,gBAAQ,KAAR;AACD;AACF,KAPD;;AASA,SAAK,EAAL,CAAQ,SAAR,EAAmB,oBAAY;AAC7B,UAAM,mBAAmB,SAAS,OAAT,CAAiB,QAAQ,GAAR,KAAgB,GAAjC,EAAsC,EAAtC,CAAzB;;AAEA,WAAK,OAAL,CAAa,eAAO;AAClB,YAAI,CAAC,MAAM,MAAN,CAAa,UAAC,IAAD,EAAO,KAAP;AAAA,iBAAiB,QAAQ,yBAAU,gBAAV,EAA4B,KAA5B,EAAmC,EAAE,KAAK,IAAP,EAAnC,CAAzB;AAAA,SAAb,EAAyF,IAAzF,CAAL,EAAqG;AACnG,iBAAO,IAAO,MAAP,mBAA2B,gBAA3B,CAAP;AACD;;AAED,iCAAU,GAAV,EAAe,QAAf,EAAyB,IAAzB,CAA8B,eAAO;AACnC,cAAO,MAAP,UAAkB,GAAlB;AACA,oCAAM,SAAN,EAAiB,CAAE,IAAF,EAAQ,GAAR,CAAjB,EAAgC,EAAE,OAAO,SAAT,EAAhC;AACD,SAHD;AAID,OATD;AAUD,KAbD;AAcD,GA5BM,CAAP;AA6BD;;AAEc,SAAS,cAAT,CAAwB,OAAxB,EAAiC,IAAjC,EAAuC;AAAA;AAAA;AAAA;;AAAA;AACpD,yBAAkB,OAAlB,8HAA2B;AAAA,UAAhB,GAAgB;;AACzB,oBAAc,GAAd,EAAmB,IAAnB;AACD;AAHmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIrD","file":"index.js","sourcesContent":["import { Gaze } from 'gaze';\nimport { spawn } from 'child_process';\nimport ansiBold from 'ansi-bold';\nimport minimatch from 'minimatch';\nimport formatCmd from './format-cmd';\n\nfunction startWatching({ watch, match, exec }, { verbose }) {\n  const list = (key, values) => values.map(value => `--${key}=${ansiBold(value)}`).join(', ');\n  const log = msg => {\n    if (verbose) {\n      console.log(msg);\n    }\n  };\n\n  return new Promise(resolve => {\n    match = match || [ '**/*' ];\n    const prefix = [ list('watch', watch), list('match', match), list('exec', exec) ].join(' ');\n    const gaze = new Gaze(watch);\n\n    gaze.on('ready', watcher => {\n      if (Object.keys(watcher.watched()).length) {\n        log(`${prefix}: ready!`);\n      } else {\n        log(`${prefix}: no matches :(`);\n        watcher.close();\n      }\n    });\n\n    gaze.on('changed', filepath => {\n      const relativeFilepath = filepath.replace(process.cwd() + '/', '');\n\n      exec.forEach(cmd => {\n        if (!match.reduce((last, match) => last && minimatch(relativeFilepath, match, { dot: true }), true)) {\n          return log(`${prefix}: skipping ${relativeFilepath}`);\n        }\n\n        formatCmd(cmd, filepath).then(cmd => {\n          log(`${prefix}: ${cmd}`);\n          spawn('/bin/sh', [ '-c', cmd ], { stdio: 'inherit' });\n        });\n      });\n    });\n  })\n}\n\nexport default function runWhenChanged(watches, opts) {\n  for (const set of watches) {\n    startWatching(set, opts);\n  }\n}\n"]}