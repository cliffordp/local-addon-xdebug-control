'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = runWhenChanged;

var _gaze = require('gaze');

var _child_process = require('child_process');

var _ansiBold = require('ansi-bold');

var _ansiBold2 = _interopRequireDefault(_ansiBold);

var _minimatch = require('minimatch');

var _minimatch2 = _interopRequireDefault(_minimatch);

var _formatCmd = require('./format-cmd');

var _formatCmd2 = _interopRequireDefault(_formatCmd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function startWatching(_ref, _ref2) {
  var watch = _ref.watch;
  var match = _ref.match;
  var exec = _ref.exec;
  var verbose = _ref2.verbose;

  var list = function list(key, values) {
    return values.map(function (value) {
      return '--' + key + '=' + (0, _ansiBold2.default)(value);
    }).join(', ');
  };
  var log = function log(msg) {
    if (verbose) {
      console.log(msg);
    }
  };

  return new Promise(function (resolve) {
    match = match || ['**/*'];
    var prefix = [list('watch', watch), list('match', match), list('exec', exec)].join(' ');
    var gaze = new _gaze.Gaze(watch);

    gaze.on('ready', function (watcher) {
      if (Object.keys(watcher.watched()).length) {
        log(prefix + ': ready!');
      } else {
        log(prefix + ': no matches :(');
        watcher.close();
      }
    });

    gaze.on('changed', function (filepath) {
      var relativeFilepath = filepath.replace(process.cwd() + '/', '');

      exec.forEach(function (cmd) {
        if (!match.reduce(function (last, match) {
          return last && (0, _minimatch2.default)(relativeFilepath, match, { dot: true });
        }, true)) {
          return log(prefix + ': skipping ' + relativeFilepath);
        }

        (0, _formatCmd2.default)(cmd, filepath).then(function (cmd) {
          log(prefix + ': ' + cmd);
          (0, _child_process.spawn)('/bin/sh', ['-c', cmd], { stdio: 'inherit' });
        });
      });
    });
  });
}

function runWhenChanged(watches, opts) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = watches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var set = _step.value;

      startWatching(set, opts);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}
//# sourceMappingURL=index.js.map